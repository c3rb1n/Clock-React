{"version":3,"sources":["Clock/Clock.module.scss","Clock/CurrentTime/CurrentTime.module.scss","Clock/CurrentDate/CurrentDate.module.scss","Clock/CurrentTime/CurrentTime.jsx","Clock/CurrentDate/CurrentDate.jsx","Clock/Clock.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","CurrentTime","date","appendNull","hoursConverter","hours","ampmChanger","useState","getHours","setHours","getMinutes","minutes","setMinutes","getSeconds","seconds","setSeconds","ampm","setAmpm","useEffect","timeID","setInterval","Date","tick","clearInterval","className","classes","time","CurrentDate","getFullYear","year","setYear","getMonth","month","setMonth","getDate","day","setDay","dateID","Clock","props","element","clock","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,KAAO,4B,gBCAzBD,EAAOC,QAAU,CAAC,KAAO,4B,6KCwCVC,EAtCK,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,WAClBC,EAAiB,SAAAC,GAAK,OAAIA,GAAS,GAAKA,EAAQ,GAAKA,GACrDC,EAAc,SAAAD,GAAK,OAAIA,GAAS,GAAK,KAAO,MAFV,EAkBdE,mBAASJ,EAAWC,EAAeF,EAAKM,cAlB1B,mBAkBjCH,EAlBiC,KAkB1BI,EAlB0B,OAmBVF,mBAASJ,EAAWD,EAAKQ,eAnBf,mBAmBjCC,EAnBiC,KAmBxBC,EAnBwB,OAoBVL,mBAASJ,EAAWD,EAAKW,eApBf,mBAoBjCC,EApBiC,KAoBxBC,EApBwB,OAqBhBR,mBAASD,EAAYJ,EAAKM,aArBV,mBAqBjCQ,EArBiC,KAqB3BC,EArB2B,KA8BxC,OAPAC,qBAAU,WACN,IAAMC,EAASC,aAAY,kBApBlB,WACT,IAAMlB,EAAO,IAAImB,KAEXhB,EAAQF,EAAWC,EAAeF,EAAKM,aACvCG,EAAUR,EAAWD,EAAKQ,cAC1BI,EAAUX,EAAWD,EAAKW,cAC1BG,EAAOV,EAAYJ,EAAKM,YAE9BC,EAASJ,GACTO,EAAWD,GACXI,EAAWD,GACXG,EAAQD,GASyBM,KAAQ,KACzC,OAAO,WACHC,cAAcJ,OAKlB,sBAAKK,UAAWC,IAAQC,KAAxB,UACI,yCAAUrB,EAAV,YAAmBM,EAAnB,YAA8BG,KAC9B,+BAAOE,Q,gBCNJW,EA3BK,SAAC,GAAwB,IAAvBzB,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,WAAgB,EAShBI,mBAASL,EAAK0B,eATE,mBASjCC,EATiC,KAS3BC,EAT2B,OAUdvB,mBAASJ,EAAWD,EAAK6B,WAAa,IAVxB,mBAUjCC,EAViC,KAU1BC,EAV0B,OAWlB1B,mBAASJ,EAAWD,EAAKgC,YAXP,mBAWjCC,EAXiC,KAW5BC,EAX4B,KAoBxC,OAPAlB,qBAAU,WACN,IAAMmB,EAASjB,aAAY,kBAblB,WACT,IAAMlB,EAAO,IAAImB,KAEjBS,EAAQ5B,EAAK0B,eACbK,EAAS9B,EAAWD,EAAK6B,WAAa,IACtCK,EAAOjC,EAAWD,EAAKgC,YAQUZ,KAAQ,KACzC,OAAO,WACHC,cAAcc,OAKlB,qBAAKb,UAAWC,IAAQvB,KAAxB,mBACQiC,EADR,YACeH,EADf,YACwBH,MCNjBS,EAdD,SAAAC,GACV,IAAMrC,EAAO,IAAImB,KACXlB,EAAa,SAAAqC,GAAO,OAAIA,EAAU,GAAV,WAAmBA,GAAYA,GAE7D,OACI,sBAAKhB,UAAWC,IAAQgB,MAAxB,UACI,cAAC,EAAD,CAAavC,KAAMA,EACNC,WAAYA,IACzB,cAAC,EAAD,CAAaD,KAAMA,EACNC,WAAYA,QCFtBuC,EARH,SAAAH,GACR,OACI,qBAAKf,UAAU,MAAf,SACI,cAAC,EAAD,OCKGmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5dda4581.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"clock\":\"Clock_clock__ZxSfX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"time\":\"CurrentTime_time__3XFgA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"date\":\"CurrentDate_date__1iNH1\"};","import React, {useEffect, useState} from \"react\";\r\nimport classes from \"./CurrentTime.module.scss\";\r\n\r\nconst CurrentTime = ({date, appendNull}) => {\r\n    const hoursConverter = hours => hours >= 13 ? hours - 12 : hours;\r\n    const ampmChanger = hours => hours >= 12 ? \"PM\" : \"AM\";\r\n\r\n    const tick = () => {\r\n        const date = new Date();\r\n\r\n        const hours = appendNull(hoursConverter(date.getHours()));\r\n        const minutes = appendNull(date.getMinutes());\r\n        const seconds = appendNull(date.getSeconds());\r\n        const ampm = ampmChanger(date.getHours());\r\n\r\n        setHours(hours);\r\n        setMinutes(minutes);\r\n        setSeconds(seconds);\r\n        setAmpm(ampm);\r\n    };\r\n\r\n    const [hours, setHours] = useState(appendNull(hoursConverter(date.getHours())));\r\n    const [minutes, setMinutes] = useState(appendNull(date.getMinutes()));\r\n    const [seconds, setSeconds] = useState(appendNull(date.getSeconds()));\r\n    const [ampm, setAmpm] = useState(ampmChanger(date.getHours()));\r\n\r\n    useEffect(() => {\r\n        const timeID = setInterval(() => tick(), 1000);\r\n        return () => {\r\n            clearInterval(timeID);\r\n        };\r\n    });\r\n\r\n    return (\r\n        <div className={classes.time}>\r\n            <span>{`${hours}:${minutes}:${seconds}`}</span>\r\n            <span>{ampm}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrentTime;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport classes from \"./CurrentDate.module.scss\";\r\n\r\nconst CurrentDate = ({date, appendNull}) => {\r\n    const tick = () => {\r\n        const date = new Date();\r\n\r\n        setYear(date.getFullYear());\r\n        setMonth(appendNull(date.getMonth() + 1));\r\n        setDay(appendNull(date.getDate()));\r\n    }\r\n\r\n    const [year, setYear] = useState(date.getFullYear());\r\n    const [month, setMonth] = useState(appendNull(date.getMonth() + 1));\r\n    const [day, setDay] = useState(appendNull(date.getDate()));\r\n\r\n    useEffect(() => {\r\n        const dateID = setInterval(() => tick(), 1000);\r\n        return () => {\r\n            clearInterval(dateID);\r\n        };\r\n    });\r\n\r\n    return (\r\n        <div className={classes.date}>\r\n            {`${day}.${month}.${year}`}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CurrentDate;\r\n","import React from \"react\";\r\nimport classes from \"./Clock.module.scss\";\r\nimport CurrentTime from \"./CurrentTime/CurrentTime\";\r\nimport CurrentDate from \"./CurrentDate/CurrentDate\";\r\n\r\nconst Clock = props => {\r\n    const date = new Date();\r\n    const appendNull = element => element < 10 ? `0${element}` : element;\r\n\r\n    return (\r\n        <div className={classes.clock}>\r\n            <CurrentTime date={date}\r\n                         appendNull={appendNull}/>\r\n            <CurrentDate date={date}\r\n                         appendNull={appendNull}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Clock;","import React from \"react\";\nimport \"./App.scss\";\nimport Clock from \"./Clock/Clock\";\n\nconst App = props => {\n    return (\n        <div className=\"app\">\n            <Clock/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}